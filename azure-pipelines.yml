# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
pr: none

schedules:
- cron: "0 */8 * * *" # DAMN BUG!!!!!!!!!!!!!!!!!!!!!!!!!
  displayName: Schedule Build
  branches:
    include:
    - master
  always: true

variables:
  BuildCheck: 'False'
  FORCE_INSTALL: 1
  BUILD_UTILITIES: 1
  DEBUG: 0

pool:
  vmImage: 'macOS-latest'

steps:

- task: Bash@3
  displayName: Prepare Pipelines
  inputs:
    targetType: 'inline'
    script: |
      #!/bin/bash
      cd ../b
      git clone https://github.com/MuntashirAkon/DPCIManager.git
      cd DPCIManager
      git clone https://github.com/pciutils/pciids.git
      mv pciids/pci.ids .
      url=$(xcodebuild -configuration Release -arch x86_64 -scheme dspci -showBuildSettings | grep TARGET_BUILD_DIR | awk {'print $NF'})
      xcodebuild -configuration Release -arch x86_64 -scheme dspci
      mkdir ../../a/Artifacts
      cp -f $url/dspci ../../a/Artifacts
      ls $(Build.ArtifactStagingDirectory)/Artifacts

- task: GitHubRelease@0
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['BuildCheck'], 'True'))
  displayName: 'Publish GitHub Release'
  inputs:
    gitHubConnection: release
    repositoryName: '$(Build.Repository.Name)'
    action: 'edit'
    target: '$(Build.SourceVersion)'
    tagSource: 'manual'
    tag: '$(BuildDate)'
    title: '$(BuildDate)'
    assets: '$(Build.ArtifactStagingDirectory)/Artifacts/dspci'
    addChangeLog: false
    isPreRelease: true